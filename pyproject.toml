[project]
name = "aioarxiv"
version = "0.2.0"
description = "arxiv Parse library"
authors = [
    { name = "BalconyJH", email = "balconyjh@gmail.com" },
]
dependencies = [
    "loguru~=0.7",
    "pydantic>=2.9.2",
    "aiohttp>=3.10.10",
    "tenacity>=9.0.0",
    "aiofiles>=24.1.0",
    "platformdirs>=4.3.6",
    "tzdata>=2024.2",
    "pydantic-settings>=2.7.1",
    "defusedxml>=0.7.1",
    "certifi>=2025.10.5",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "MIT" }
package = { include = ["aioarxiv"] }

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov-report=term-missing --ignore=.venv/"
asyncio_default_fixture_loop_scope = "session"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # PEP8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TC",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    # "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "FAST",  # FastAPI
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",   # 过长的行由 ruff format 处理, 剩余的都是字符串
    "UP035",  # pyupgrade, 但 typing.Callable 的导入会报错
    "TRY003",
    "TRY301",  # 为啥非要把 raise 丢进另外一个 inner fn 里
    "BLE001",  # except Exception as e
    "PGH003",  # 要求 `# type: ignore` 提供理由，但 pyright 和 mypy 等都不是统一标准。
    "PLC0414",  # 用 import-as 表示 re-export
    "N818",  # 要求所有自定义错误以 Error 作后缀，但我们不这么做
    "RET502", # return = return None
    "RET503",  # 就要 implicit return none
    "PLC0105",  # 我们已经用 R 表示协变，Q 表示逆变了
    "PLR0913",  # 参数就那么多的，你用 builder 什么的不是更逆天？
    "SIM108",  # 迫真 simplicy
    "RUF009",  # 我不想要额外的全局变量。
    "RUF003",  # 中文注释里用全角符号怎么你了
    "SLOT000", # 动态类型需求，主要是 json5 backend
    "PLR0911", "PLR0912", "PLR0915",  # 复杂度高点怎么你了
    "PYI041", # int 和 float 在运行时的类型没有交集（互不成立 issubclass）
    "PLW2901",  # shallow 怎么你了
    "S101", # assert 怎么你了，非要 RuntimeError 吗
    "PLR2004",  # magic number 怎么你了
    "TRY004",  # 我要抛啥错误我清楚
    "COM812", # 强制尾随逗号
    "TID252", # 相对导入
    "ISC001", # format warning
]
flake8-quotes = { inline-quotes = "double", multiline-quotes = "double" }

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint.isort]
length-sort = false
force-sort-within-sections = true
known-first-party = ["aioarxiv", "tests/*"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
venv = ".venv"
executionEnvironments = [
    { root = "./tests", extraPaths = [
        "./",
    ] },
    { root = "./" },
]
typeCheckingMode = "standard"
disableBytesTypePromotions = true

[tool.pdm]
distribution = true

[dependency-groups]
test = [
    "pytest-cov~=5.0",
    "pytest-xdist~=3.6",
    "pytest-asyncio~=0.23",
    "pytest-mock>=3.14.0",
]
dev = [
    "pyright[nodejs]>=1.1.391",
    "ruff>=0.8",
    "pre-commit~=4.0",
    "bump-my-version>=0.28.1",
]

[tool.coverage.run]
omit = [
    ".venv/*",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
